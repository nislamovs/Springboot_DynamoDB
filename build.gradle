plugins {
	id ("application")
	id ("io.freefair.lombok").version("6.5.1")

	id ("org.springframework.boot").version("2.7.5")
	id ("io.spring.dependency-management").version("1.0.11.RELEASE")

	id ("com.palantir.docker").version("0.31.0")
	id ("com.palantir.docker-run").version("0.31.0")
	id ("java")
}

group = 'com.example'
version = '1.0.0'
sourceCompatibility = JavaVersion.VERSION_15
targetCompatibility = JavaVersion.VERSION_15

apply plugin: "application"
apply plugin: 'org.springframework.boot'
apply plugin: "io.freefair.lombok"

wrapper {
	distributionType = Wrapper.DistributionType.ALL
	gradleVersion = '6.8.1'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

mainClassName = 'DynamoDemoApplication'

repositories {
	mavenCentral()
	jcenter()
}

dependencies {

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation("org.springframework.boot:spring-boot-starter-webflux")

	implementation 'org.springdoc:springdoc-openapi-webflux-core:1.5.13'
	implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.5.13'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//	Mapping
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	implementation platform('software.amazon.awssdk:bom:2.15.0')
	implementation 'software.amazon.awssdk:dynamodb'
	implementation 'software.amazon.awssdk:dynamodb-enhanced'
//	implementation 'software.amazon.awssdk:dynamodbmapper-v1'
//	implementation 'software.amazon.awssdk:dynamodbdocument-v1'

	implementation 'com.github.javafaker:javafaker:0.12'

	testImplementation 'io.projectreactor:reactor-test:3.4.22'
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation 'org.testcontainers:testcontainers:1.17.3'
	testImplementation 'org.testcontainers:junit-jupiter:1.17.3'

}

test {
	useJUnitPlatform()
}

bootJar {
	archiveBaseName = 'dynamoDbCrudApp'
	archiveVersion =  '1.0.0'
}

task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree("build/libs/dynamoDbCrudApp-1.0.0.jar"))
	into("build/dependency")
}

docker {
	name "dynamodbcrudapp"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}

dockerRun {
	name  "dynamoDbCrudApp"
	image "dynamoDbCrudApp-1.0.0"
	clean true
}